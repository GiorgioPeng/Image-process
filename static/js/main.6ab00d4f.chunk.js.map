{"version":3,"sources":["globalState.js","Uploader/Uploader.js","Canvas/index.js","App.js","reportWebVitals.js","index.js"],"names":["GloalStateContext","createContext","initState","imageSrc","image","imageData","imageRed","imageGreen","imageBlue","imageAlpha","GlobalStateProvider","children","useState","state","setState","Provider","value","key","console","log","lastState","useGlobalState","useContext","Input","styled","display","UploadButtons","updateState","canvasRef","React","imgRef","htmlFor","accept","id","multiple","type","onChange","event","currentTarget","files","URL","createObjectURL","Button","variant","component","src","ref","style","onLoad","current","height","width","content","getContext","clearRect","drawImage","getImageData","data","i","length","push","Canvas","RedRef","GreenRef","BlueRef","gradientRedRef","gradientGreenRef","gradientBlueRef","tempArray","redImage","Uint8ClampedArray","imageCp","ImageData","putImageData","greenImage","blueImage","red2Array","slice","gradientRed","j","maxGradient","Math","max","minGradient","min","redGradientArray","green2Array","gradientGreen","greenGradientArray","blue2Array","gradientBlue","blueGradientArray","justifyContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ab00d4f.chunk.js","sourcesContent":["import React, { useState, createContext, useContext, } from 'react';\r\n\r\nconst GloalStateContext = createContext(null)\r\n\r\nconst initState = {\r\n    imageSrc:'',\r\n    image:'',\r\n    imageData:'',\r\n    imageRed:'',\r\n    imageGreen:'',\r\n    imageBlue:'',\r\n    imageAlpha:'',\r\n};\r\nexport function GlobalStateProvider({ children }) {\r\n    const [state, setState] = useState(initState);\r\n\r\n    const updateState = (key, value) => {\r\n        console.log(key, value)\r\n        setState((lastState) => {\r\n            return {\r\n                ...lastState,\r\n                [key]: value\r\n            }\r\n        })\r\n    }\r\n    const resetState = () => {\r\n        setState(initState)\r\n    }\r\n    return (\r\n        <GloalStateContext.Provider value={[state, updateState, resetState]}>\r\n            {children}\r\n        </GloalStateContext.Provider>\r\n    )\r\n}\r\nexport function useGlobalState() {\r\n    return useContext(GloalStateContext)\r\n}","import * as React from 'react';\r\nimport { styled } from '@material-ui/core/styles';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useGlobalState } from '../globalState'\r\n\r\nconst Input = styled('input')({\r\n  display: 'none',\r\n});\r\n\r\nexport default function UploadButtons() {\r\n  // console.log(useGlobalState)\r\n  const [state, updateState,] = useGlobalState()\r\n  const upload = (event) => {\r\n    console.log(event.currentTarget.files[0])\r\n    updateState('imageSrc', URL.createObjectURL(event.currentTarget.files[0]))\r\n  }\r\n  const canvasRef = React.useRef(null)\r\n  const imgRef = React.useRef(null)\r\n  const draw = () => {\r\n    canvasRef.current.height = imgRef.current.height || 400\r\n    canvasRef.current.width = imgRef.current.width || 400\r\n    const content = canvasRef.current.getContext('2d')\r\n    content.clearRect(0, 0, canvasRef.current.height, canvasRef.current.width)\r\n    content.drawImage(imgRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height)\r\n    const image = content.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n    updateState('image', image)\r\n    const imageData = image.data\r\n    // console.log(content.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height))\r\n    const imageRed = []\r\n    const imageGreen = []\r\n    const imageBlue = []\r\n    const imageAlpha = []\r\n    updateState('imageData', imageData)\r\n    for (let i = 0; i < imageData.length; i += 4) {\r\n      imageAlpha.push(imageData[i + 3])\r\n      imageBlue.push(imageData[i + 2])\r\n      imageGreen.push(imageData[i + 1])\r\n      imageRed.push(imageData[i])\r\n    }\r\n    updateState('imageRed', imageRed)\r\n\r\n    updateState('imageGreen', imageGreen)\r\n\r\n    updateState('imageBlue', imageRed)\r\n\r\n    updateState('imageAlpha', imageAlpha)\r\n    imgRef.current.style.display = 'none'\r\n  }\r\n  return (\r\n    <div>\r\n      <label htmlFor=\"contained-button-file\">\r\n        <Input accept=\"image/*\" id=\"contained-button-file\" multiple type=\"file\" onChange={upload} />\r\n        <Button variant=\"contained\" component=\"span\">\r\n          上传图片\r\n        </Button>\r\n      </label>\r\n      <img src={state.imageSrc} ref={imgRef} style={{ \"maxWidth\": \"400px\" }} onLoad={draw} />\r\n      {\r\n        state.imageSrc.length === '' ?\r\n          <></>\r\n          :\r\n          <div>\r\n            <p>原始图像</p>\r\n            <canvas ref={canvasRef}></canvas>\r\n          </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n","import * as React from 'react';\r\nimport { styled } from '@material-ui/core/styles';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useGlobalState } from '../globalState'\r\n\r\nfunction Canvas() {\r\n\r\n    const [state, updateState,] = useGlobalState()\r\n    const RedRef = React.useRef(null)\r\n    const GreenRef = React.useRef(null)\r\n    const BlueRef = React.useRef(null)\r\n    const gradientRedRef = React.useRef(null)\r\n    const gradientGreenRef = React.useRef(null)\r\n    const gradientBlueRef = React.useRef(null)\r\n    React.useEffect(() => {\r\n        if (state.imageRed.length !== 0) {\r\n            let content = RedRef.current.getContext('2d')\r\n            let tempArray = []\r\n            for (let i = 0; i < state.imageRed.length; i++) {\r\n                tempArray.push(state.imageRed[i])\r\n                tempArray.push(0)\r\n                tempArray.push(0)\r\n                tempArray.push(state.imageAlpha[i])\r\n            }\r\n            let redImage = new Uint8ClampedArray(tempArray)\r\n            let imageCp = new ImageData(redImage, state.image.width, state.image.height)\r\n            content.putImageData(imageCp, 0, 0)\r\n\r\n\r\n            content = GreenRef.current.getContext('2d')\r\n            tempArray = []\r\n            for (let i = 0; i < state.imageRed.length; i++) {\r\n                tempArray.push(0)\r\n                tempArray.push(state.imageGreen[i])\r\n                tempArray.push(0)\r\n                tempArray.push(255)\r\n            }\r\n            let greenImage = new Uint8ClampedArray(tempArray)\r\n            imageCp = new ImageData(greenImage, state.image.width, state.image.height)\r\n            content.putImageData(imageCp, 0, 0)\r\n\r\n\r\n            content = BlueRef.current.getContext('2d')\r\n            tempArray = []\r\n            for (let i = 0; i < state.imageRed.length; i++) {\r\n                tempArray.push(0)\r\n                tempArray.push(0)\r\n                tempArray.push(state.imageBlue[i])\r\n                tempArray.push(state.imageAlpha[i])\r\n            }\r\n            let blueImage = new Uint8ClampedArray(tempArray)\r\n            imageCp = new ImageData(blueImage, state.image.width, state.image.height)\r\n            content.putImageData(imageCp, 0, 0)\r\n\r\n\r\n            content = gradientRedRef.current.getContext('2d')\r\n            const red2Array = []\r\n            for (let i = 0; i < state.imageRed.length; i += state.image.width) {\r\n                console.log(state.image.width)\r\n                red2Array.push(state.imageRed.slice(i, i + state.image.width))\r\n            }\r\n            // console.log(red2Array)\r\n            //red\r\n            const gradientRed = []\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    red2Array[i][j] = (red2Array[i][j] - red2Array[i + 1][j]) + (red2Array[i][j] - red2Array[i][j + 1])\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    gradientRed.push(red2Array[i][j])\r\n                }\r\n            }\r\n            let maxGradient = Math.max(...gradientRed)\r\n            let minGradient = Math.min(...gradientRed)\r\n            tempArray = []\r\n            for (let i = 0; i < gradientRed.length; i++) {\r\n                tempArray.push((gradientRed[i] - minGradient) / (maxGradient - minGradient) * 255)\r\n                tempArray.push(0)\r\n                tempArray.push(0)\r\n                tempArray.push(state.imageAlpha[i])\r\n            }\r\n            console.log(tempArray)\r\n            let redGradientArray = new Uint8ClampedArray(tempArray)\r\n            imageCp = new ImageData(redGradientArray, state.image.width, state.image.height)\r\n            content.putImageData(imageCp, 0, 0)\r\n\r\n\r\n\r\n            // 绿的\r\n            content = gradientGreenRef.current.getContext('2d')\r\n            const green2Array = []\r\n            for (let i = 0; i < state.imageRed.length; i += state.image.width) {\r\n                console.log(state.image.width)\r\n                green2Array.push(state.imageRed.slice(i, i + state.image.width))\r\n            }\r\n            // console.log(red2Array)\r\n\r\n            const gradientGreen = []\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    green2Array[i][j] = (green2Array[i][j] - green2Array[i + 1][j]) + (green2Array[i][j] - green2Array[i][j + 1])\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    gradientGreen.push(green2Array[i][j])\r\n                }\r\n            }\r\n            maxGradient = Math.max(...gradientGreen)\r\n            minGradient = Math.min(...gradientGreen)\r\n            tempArray = []\r\n            for (let i = 0; i < gradientGreen.length; i++) {\r\n                tempArray.push(0)\r\n                tempArray.push((gradientGreen[i] - minGradient) / (maxGradient - minGradient) * 255)\r\n                tempArray.push(0)\r\n                tempArray.push(state.imageAlpha[i])\r\n            }\r\n            console.log(tempArray)\r\n            let greenGradientArray = new Uint8ClampedArray(tempArray)\r\n            imageCp = new ImageData(greenGradientArray, state.image.width, state.image.height)\r\n            content.putImageData(imageCp, 0, 0)\r\n\r\n            // 蓝的\r\n            content = gradientBlueRef.current.getContext('2d')\r\n            const blue2Array = []\r\n            for (let i = 0; i < state.imageRed.length; i += state.image.width) {\r\n                console.log(state.image.width)\r\n                blue2Array.push(state.imageBlue.slice(i, i + state.image.width))\r\n            }\r\n            // console.log(red2Array)\r\n\r\n            const gradientBlue = []\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    blue2Array[i][j] = (blue2Array[i][j] - blue2Array[i + 1][j]) + (blue2Array[i][j] - blue2Array[i][j + 1])\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    gradientBlue.push(blue2Array[i][j])\r\n                }\r\n            }\r\n            maxGradient = Math.max(...gradientBlue)\r\n            minGradient = Math.min(...gradientBlue)\r\n            tempArray = []\r\n            for (let i = 0; i < gradientBlue.length; i++) {\r\n                tempArray.push(0)\r\n                tempArray.push(0)\r\n                tempArray.push((gradientBlue[i] - minGradient) / (maxGradient - minGradient) * 255)\r\n                tempArray.push(state.imageAlpha[i])\r\n            }\r\n            console.log(tempArray)\r\n            let blueGradientArray = new Uint8ClampedArray(tempArray)\r\n            imageCp = new ImageData(blueGradientArray, state.image.width, state.image.height)\r\n            content.putImageData(imageCp, 0, 0)\r\n        }\r\n    }, [state.imageRed])\r\n    return (\r\n        <div style={{display: 'flex', justifyContent: 'space-around'}}>\r\n            <div>\r\n                <p>红色通道</p>\r\n                <canvas ref={RedRef} />\r\n            </div>\r\n            <div>\r\n                <p>绿色通道</p>\r\n                <canvas ref={GreenRef} />\r\n            </div>\r\n            <div>\r\n\r\n                <p>蓝色通道</p>\r\n                <canvas ref={BlueRef} />\r\n            </div>\r\n            <div>\r\n\r\n                <p>红色差分梯度</p>\r\n                <canvas ref={gradientRedRef} />\r\n            </div>\r\n            <div>\r\n\r\n                <p>绿色差分梯度</p>\r\n                <canvas ref={gradientGreenRef} />\r\n            </div>\r\n            <div>\r\n\r\n                <p>蓝色差分梯度</p>\r\n                <canvas ref={gradientBlueRef} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Canvas;","// import logo from './logo.svg';\nimport Loader from './Uploader/Uploader';\nimport Canvas from './Canvas';\nimport { GlobalStateProvider } from \"./globalState\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <GlobalStateProvider>\n      <Loader/>\n      <Canvas/>\n    </GlobalStateProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}