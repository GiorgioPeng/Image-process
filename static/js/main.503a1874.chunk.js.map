{"version":3,"sources":["globalState.js","Uploader/index.js","Canvases/Channels.js","Canvases/Gradient.js","Canvases/RobortGradient.js","Canvases/HistSegment.js","ErrorBoundary.js","App.js","reportWebVitals.js","index.js"],"names":["GloalStateContext","createContext","initState","imageSrc","image","imageData","red","green","blue","alpha","GlobalStateProvider","children","useState","state","setState","Provider","value","key","console","log","lastState","useGlobalState","useContext","Input","styled","display","H1","theme","typography","h1","backgroundColor","palette","background","paper","padding","spacing","UploadButtons","updateState","imgRef","React","canvasRef","style","htmlFor","accept","id","type","onChange","event","URL","createObjectURL","currentTarget","files","Button","variant","component","src","ref","onLoad","current","width","height","content","getContext","clearRect","drawImage","data","getImageData","i","length","push","H6","h6","Channels","redRef","greenRef","blueRef","temp","Uint8ClampedArray","context","ImageData","putImageData","Gradient","redGradientRef","greenGradientRef","blueGradientRef","gradientRef","slice","j","temp1","maxGradiant","Math","max","minGradiant","min","map","temp2","temp3","RobortGradient","objectRef","backgroundRef","calcGas","u","sigma","x","pow","PI","exp","calcKL","t","hist","e","p0t","ptg","pbt","kl","u0t","ubt","sigma0t","sigmabt","left","right","originPositionArr","grayArr","grayObj","tempValue","parseInt","isNaN","totalSize","Object","keys","forEach","parseFloat","minKl","threshold","objectRed","objectGreen","objectBlue","bgRed","bgGreen","bgBlue","index","ErrorBoundary","props","hasError","error","errorInfo","this","Alert","severity","AlertTitle","App","Divider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.503a1874.chunk.js","sourcesContent":["import React, { useState, createContext, useContext, } from 'react';\r\n\r\nconst GloalStateContext = createContext(null)\r\n\r\nconst initState = {\r\n    imageSrc:'',\r\n    image:'',\r\n    imageData:'',\r\n    red:'',\r\n    green:'',\r\n    blue:'',\r\n    alpha:'',\r\n\r\n};\r\nexport function GlobalStateProvider({ children }) {\r\n    const [state, setState] = useState(initState);\r\n\r\n    const updateState = (key, value) => {\r\n        console.log(key, value)\r\n        setState((lastState) => {\r\n            return {\r\n                ...lastState,\r\n                [key]: value\r\n            }\r\n        })\r\n    }\r\n    const resetState = () => {\r\n        setState(initState)\r\n    }\r\n    return (\r\n        <GloalStateContext.Provider value={[state, updateState, resetState]}>\r\n            {children}\r\n        </GloalStateContext.Provider>\r\n    )\r\n}\r\nexport function useGlobalState() {\r\n    return useContext(GloalStateContext)\r\n}","import * as React from 'react';\r\nimport { styled } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useGlobalState } from '../globalState';\r\n\r\nconst Input = styled('input')({\r\n    display: 'none',\r\n});\r\nconst H1 = styled('H1')(({ theme }) => ({\r\n    ...theme.typography.h1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(1),\r\n  }));\r\n  \r\n\r\nexport default function UploadButtons() {\r\n    const [state, updateState,] = useGlobalState();\r\n    const imgRef = React.useRef(null)\r\n    const canvasRef = React.useRef(null)\r\n    const upload = (event) => {\r\n        updateState('imageSrc', URL.createObjectURL(event.currentTarget.files[0]))\r\n    }\r\n    const draw = ()=>{\r\n        canvasRef.current.width = imgRef.current.width || 400\r\n        canvasRef.current.height = imgRef.current.height || 400\r\n        const content = canvasRef.current.getContext('2d')\r\n        content.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n        content.drawImage(imgRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height)\r\n        imgRef.current.style.display = 'none'\r\n        const data = content.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n        updateState('image',data)\r\n        updateState('imageData',data.data)\r\n        const red = []\r\n        const green = []\r\n        const blue = []\r\n        const alpha = []\r\n        for(let i = 0;i<data.data.length;i+=4){\r\n            red.push(data.data[i])\r\n            green.push(data.data[i+1])\r\n            blue.push(data.data[i+2])\r\n            alpha.push(data.data[i+3])\r\n        }\r\n        updateState('red',red)\r\n        updateState('green',green)\r\n        updateState('blue',blue)\r\n        updateState('alpha',alpha)\r\n    }\r\n    return (\r\n        <div style={{'margin':'20vh auto', 'display': 'flex','alignItems':'center','flexDirection':'column'}}>\r\n            <H1>Upload is all you need.</H1>\r\n            <label htmlFor=\"contained-button-file\">\r\n                <Input accept=\"image/*\" id=\"contained-button-file\" type=\"file\" onChange={upload} />\r\n                <Button variant=\"contained\" component=\"span\">\r\n                    Upload\r\n                </Button>\r\n            </label>\r\n            <img src={state.imageSrc} ref={imgRef} style={{ 'maxWidth': '400px' }} onLoad={draw}/>\r\n            <canvas ref={canvasRef} />\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { useGlobalState } from '../globalState';\r\nimport { styled } from '@material-ui/core/styles';\r\n\r\nconst H6 = styled('H6')(({ theme }) => ({\r\n    ...theme.typography.h6,\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(1),\r\n  }));\r\n\r\nexport default function Channels() {\r\n    const redRef = React.useRef(null)\r\n    const greenRef = React.useRef(null)\r\n    const blueRef = React.useRef(null)\r\n    const [state,] = useGlobalState();\r\n    React.useEffect(() => {\r\n        if (state.imageData.length !== 0) {\r\n            let temp = []\r\n            for (let i = 0; i < state.red.length; i++) {\r\n                temp.push(state.red[i])\r\n                temp.push(0)\r\n                temp.push(0)\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            redRef.current.width = state.image.width || 400\r\n            redRef.current.height = state.image.height || 400\r\n            let context = redRef.current.getContext('2d')\r\n            let imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < state.green.length; i++) {\r\n                temp.push(0)\r\n                temp.push(state.green[i])\r\n                temp.push(0)\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            greenRef.current.width = state.image.width || 400\r\n            greenRef.current.height = state.image.height || 400\r\n            context = greenRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < state.blue.length; i++) {\r\n                temp.push(0)\r\n                temp.push(0)\r\n                temp.push(state.blue[i])\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            blueRef.current.width = state.image.width || 400\r\n            blueRef.current.height = state.image.height || 400\r\n            context = blueRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n        }\r\n\r\n\r\n    }, [state.imageData])\r\n    return (\r\n        <div>\r\n            {state.imageData.length !== 0 ?\r\n                <div style={{'display': 'flex','justifyContent':'space-around'}}>\r\n                    <div>\r\n                        <H6>红色通道</H6>\r\n                        <canvas ref={redRef} />\r\n                    </div>\r\n                    <div>\r\n                        <H6>绿色通道</H6>\r\n                        <canvas ref={greenRef} />\r\n                    </div>\r\n                    <div>\r\n                        <H6>蓝色通道</H6>\r\n                        <canvas ref={blueRef}></canvas>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <></>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { useGlobalState } from '../globalState';\r\nimport { styled } from '@material-ui/core/styles';\r\n\r\nconst H6 = styled('H6')(({ theme }) => ({\r\n    ...theme.typography.h6,\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(1),\r\n  }));\r\n\r\nexport default function Gradient() {\r\n    const redGradientRef = React.useRef(null)\r\n    const greenGradientRef = React.useRef(null)\r\n    const blueGradientRef = React.useRef(null)\r\n    const gradientRef = React.useRef(null)\r\n    const [state,] = useGlobalState();\r\n    React.useEffect(() => {\r\n        if (state.imageData.length !== 0) {\r\n            let temp = []\r\n            for (let i = 0; i < state.red.length; i += state.image.width) {\r\n                temp.push(state.red.slice(i, i + state.image.width))\r\n            }\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    temp[i][j] = (temp[i][j] - temp[i + 1][j]) + (temp[i][j] - temp[i][j + 1])\r\n                }\r\n            }\r\n            let temp1 = []\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    temp1.push(temp[i][j])\r\n                }\r\n            }\r\n            let maxGradiant = Math.max(...temp1)\r\n            let minGradiant = Math.min(...temp1)\r\n            temp1 = temp1.map(i => (i - minGradiant) / (maxGradiant - minGradiant) * 255)\r\n            temp = []\r\n            for (let i = 0; i < temp1.length; i++) {\r\n                temp.push(temp1[i])\r\n                temp.push(0)\r\n                temp.push(0)\r\n                temp.push(state.alpha[i])\r\n            }\r\n\r\n\r\n            temp = new Uint8ClampedArray(temp)\r\n            redGradientRef.current.width = state.image.width || 400\r\n            redGradientRef.current.height = state.image.height || 400\r\n            let context = redGradientRef.current.getContext('2d')\r\n            let imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < state.green.length; i += state.image.width) {\r\n                temp.push(state.green.slice(i, i + state.image.width))\r\n            }\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    temp[i][j] = (temp[i][j] - temp[i + 1][j]) + (temp[i][j] - temp[i][j + 1])\r\n                }\r\n            }\r\n            let temp2 = []\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    temp2.push(temp[i][j])\r\n                }\r\n            }\r\n            maxGradiant = Math.max(...temp2)\r\n            minGradiant = Math.min(...temp2)\r\n            temp2 = temp2.map(i => (i - minGradiant) / (maxGradiant - minGradiant) * 255)\r\n            temp = []\r\n            for (let i = 0; i < temp2.length; i++) {\r\n                temp.push(0)\r\n                temp.push(temp2[i])\r\n                temp.push(0)\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            greenGradientRef.current.width = state.image.width || 400\r\n            greenGradientRef.current.height = state.image.height || 400\r\n            context = greenGradientRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < state.blue.length; i += state.image.width) {\r\n                temp.push(state.blue.slice(i, i + state.image.width))\r\n            }\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    temp[i][j] = (temp[i][j] - temp[i + 1][j]) + (temp[i][j] - temp[i][j + 1])\r\n                }\r\n            }\r\n            let temp3 = []\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    temp3.push(temp[i][j])\r\n                }\r\n            }\r\n            maxGradiant = Math.max(...temp3)\r\n            minGradiant = Math.min(...temp3)\r\n            temp3 = temp3.map(i => (i - minGradiant) / (maxGradiant - minGradiant) * 255)\r\n            temp = []\r\n            for (let i = 0; i < temp3.length; i++) {\r\n                temp.push(0)\r\n                temp.push(0)\r\n                temp.push(temp3[i])\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            blueGradientRef.current.width = state.image.width || 400\r\n            blueGradientRef.current.height = state.image.height || 400\r\n            context = blueGradientRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < temp3.length; i++) {\r\n                temp.push(temp1[i])\r\n                temp.push(temp2[i])\r\n                temp.push(temp3[i])\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            gradientRef.current.width = state.image.width || 400\r\n            gradientRef.current.height = state.image.height || 400\r\n            context = gradientRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n        }\r\n\r\n\r\n    }, [state.imageData])\r\n    return (\r\n        <div>\r\n            {state.imageData.length !== 0 ?\r\n                <div style={{ 'display': 'flex', 'justifyContent': 'space-around' }}>\r\n                    <div style={{ 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'justifyContent': 'space-around' }}>\r\n                        <H6>红色通道差分梯度</H6>\r\n                        <canvas ref={redGradientRef} />\r\n                    </div>\r\n                    <div style={{ 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'justifyContent': 'space-around' }}>\r\n                        <H6>绿色通道差分梯度</H6>\r\n                        <canvas ref={greenGradientRef} />\r\n                    </div>\r\n                    <div style={{ 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'justifyContent': 'space-around' }}>\r\n                        <H6>蓝色通道差分梯度</H6>\r\n                        <canvas ref={blueGradientRef}></canvas>\r\n                    </div>\r\n\r\n                    <div style={{ 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'justifyContent': 'space-around' }}>\r\n                        <H6>差分梯度图</H6>\r\n                        <canvas ref={gradientRef}></canvas>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <></>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { useGlobalState } from '../globalState';\r\nimport { styled } from '@material-ui/core/styles';\r\n\r\nconst H6 = styled('H6')(({ theme }) => ({\r\n    ...theme.typography.h6,\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(1),\r\n  }));\r\n\r\nexport default function RobortGradient() {\r\n    const redGradientRef = React.useRef(null)\r\n    const greenGradientRef = React.useRef(null)\r\n    const blueGradientRef = React.useRef(null)\r\n    const gradientRef = React.useRef(null)\r\n    const [state,] = useGlobalState();\r\n    React.useEffect(() => {\r\n        if (state.imageData.length !== 0) {\r\n            let temp = []\r\n            for (let i = 0; i < state.red.length; i += state.image.width) {\r\n                temp.push(state.red.slice(i, i + state.image.width))\r\n            }\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    temp[i][j] = (temp[i][j] - temp[i + 1][j + 1]) + (temp[i][j + 1] - temp[i + 1][j])\r\n                }\r\n            }\r\n            let temp1 = []\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    temp1.push(temp[i][j])\r\n                }\r\n            }\r\n            let maxGradiant = Math.max(...temp1)\r\n            let minGradiant = Math.min(...temp1)\r\n            temp1 = temp1.map(i => (i - minGradiant) / (maxGradiant - minGradiant) * 255)\r\n            temp = []\r\n            for (let i = 0; i < temp1.length; i++) {\r\n                temp.push(temp1[i])\r\n                temp.push(0)\r\n                temp.push(0)\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            redGradientRef.current.width = state.image.width || 400\r\n            redGradientRef.current.height = state.image.height || 400\r\n            let context = redGradientRef.current.getContext('2d')\r\n            let imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < state.green.length; i += state.image.width) {\r\n                temp.push(state.green.slice(i, i + state.image.width))\r\n            }\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    temp[i][j] = (temp[i][j] - temp[i + 1][j + 1]) + (temp[i][j + 1] - temp[i + 1][j])\r\n                }\r\n            }\r\n            let temp2 = []\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    temp2.push(temp[i][j])\r\n                }\r\n            }\r\n            maxGradiant = Math.max(...temp2)\r\n            minGradiant = Math.min(...temp2)\r\n            temp2 = temp2.map(i => (i - minGradiant) / (maxGradiant - minGradiant) * 255)\r\n            temp = []\r\n            for (let i = 0; i < temp2.length; i++) {\r\n                temp.push(0)\r\n                temp.push(temp2[i])\r\n                temp.push(0)\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            greenGradientRef.current.width = state.image.width || 400\r\n            greenGradientRef.current.height = state.image.height || 400\r\n            context = greenGradientRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < state.blue.length; i += state.image.width) {\r\n                temp.push(state.blue.slice(i, i + state.image.width))\r\n            }\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    temp[i][j] = (temp[i][j] - temp[i + 1][j + 1]) + (temp[i][j + 1] - temp[i + 1][j])\r\n                }\r\n            }\r\n            let temp3 = []\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    temp3.push(temp[i][j])\r\n                }\r\n            }\r\n            maxGradiant = Math.max(...temp3)\r\n            minGradiant = Math.min(...temp3)\r\n            temp3 = temp3.map(i => (i - minGradiant) / (maxGradiant - minGradiant) * 255)\r\n            temp = []\r\n            for (let i = 0; i < temp3.length; i++) {\r\n                temp.push(0)\r\n                temp.push(0)\r\n                temp.push(temp3[i])\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            blueGradientRef.current.width = state.image.width || 400\r\n            blueGradientRef.current.height = state.image.height || 400\r\n            context = blueGradientRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < temp3.length; i++) {\r\n                temp.push(temp1[i])\r\n                temp.push(temp2[i])\r\n                temp.push(temp3[i])\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            gradientRef.current.width = state.image.width || 400\r\n            gradientRef.current.height = state.image.height || 400\r\n            context = gradientRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n        }\r\n\r\n\r\n    }, [state.imageData])\r\n    return (\r\n        <div>\r\n            {state.imageData.length !== 0 ?\r\n                <div style={{ 'display': 'flex', 'justifyContent': 'space-around' }}>\r\n                    <div style={{ 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'justifyContent': 'space-around' }}>\r\n                        <H6>红色通道差分罗伯特梯度</H6>\r\n                        <canvas ref={redGradientRef} />\r\n                    </div>\r\n                    <div style={{ 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'justifyContent': 'space-around' }}>\r\n                        <H6>绿色通道差分罗伯特梯度</H6>\r\n                        <canvas ref={greenGradientRef} />\r\n                    </div>\r\n                    <div style={{ 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'justifyContent': 'space-around' }}>\r\n                        <H6>蓝色通道差分罗伯特梯度</H6>\r\n                        <canvas ref={blueGradientRef}></canvas>\r\n                    </div>\r\n\r\n                    <div style={{ 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'justifyContent': 'space-around' }}>\r\n                        <H6>差分罗伯特梯度图</H6>\r\n                        <canvas ref={gradientRef}></canvas>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <></>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { useGlobalState } from '../globalState';\r\n\r\nimport { styled } from '@material-ui/core/styles';\r\n\r\nconst H6 = styled('H6')(({ theme }) => ({\r\n    ...theme.typography.h6,\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(1),\r\n  }));\r\n\r\nexport default function Channels() {\r\n    const objectRef = React.useRef(null)\r\n    const backgroundRef = React.useRef(null)\r\n    const [state,] = useGlobalState();\r\n    const calcGas = (u, sigma, x) => {\r\n        sigma += 1e-9\r\n        return (1 / Math.pow((2 * Math.PI * sigma),0.5) * Math.exp(-Math.pow((x - u), 2) / (2 * sigma)))\r\n    }\r\n    const calcKL = (t, hist) => {\r\n        // console.log(hist)\r\n\r\n        let e = 1e-9\r\n        let p0t = 0\r\n        for (let i = 0; i < t; i++) {\r\n            p0t += hist[i]\r\n        }\r\n        let pbt = 1 - p0t\r\n        let kl = 0\r\n        let u0t = 0\r\n        let ubt = 0\r\n        let sigma0t = 0\r\n        let sigmabt = 0\r\n        let left = hist.map(i => i / (p0t + e)).slice(0, t)\r\n        let right = hist.map(i => i / (pbt + e)).slice(t,)\r\n        // console.log(pbt,right)\r\n\r\n        for (let i = 0; i < t; i++) {\r\n            u0t += i * left[i]\r\n        }\r\n        for (let i = t; i < 256; i++) {\r\n            ubt += i * right[i-t]\r\n        }\r\n\r\n        for (let i = 0; i < t; i++) {\r\n            sigma0t += Math.pow((i - u0t), 2) * left[i]\r\n        }\r\n        for (let i = t; i <256; i++) {\r\n            sigmabt += Math.pow((i - ubt), 2) * right[i-t]\r\n        }\r\n\r\n        let ptg\r\n\r\n        for (let i = 0; i < 256; i++) {\r\n            ptg = p0t * calcGas(u0t, sigma0t, i) + pbt * calcGas(ubt, sigmabt, i) + e\r\n            kl += hist[i] * Math.log(hist[i] / ptg + e)\r\n            \r\n        }\r\n        \r\n        // console.log(Math.PI ,(Math.pow((2 * Math.PI * sigma0t),2)))\r\n        // console.log(kl)\r\n        return kl\r\n    }\r\n    React.useEffect(() => {\r\n        if (state.imageData.length !== 0) {\r\n            let originPositionArr = []\r\n            let grayArr = []\r\n            let grayObj = {}\r\n            for (let i = 0; i < state.red.length; i++) {\r\n                let tempValue = parseInt(state.red[i] * 0.3 + state.green[i] * 0.59 + state.blue[i] * 0.11)\r\n                if(isNaN(tempValue)){\r\n                    continue\r\n                }\r\n                originPositionArr.push(tempValue)\r\n                grayObj[tempValue] ? grayObj[tempValue]++ : grayObj[tempValue] = 1\r\n            }\r\n            let totalSize = 0\r\n            Object.keys(grayObj).forEach(key => {\r\n                totalSize += grayObj[key]\r\n            })\r\n\r\n            // console.log(grayObj,totalSize)\r\n            for (let i = 0; i < 256; i++) {\r\n                grayArr.push(grayObj[i] ? parseFloat(grayObj[i]) / parseFloat(totalSize) : 0)\r\n            }\r\n            // console.log(grayArr)\r\n            let minKl = 1000000\r\n            let threshold = 0\r\n            for (let i = 0; i < 256; i++) {\r\n                let kl = calcKL(i, grayArr)\r\n                // console.log(kl)\r\n                if (minKl > kl) {\r\n                    minKl = kl\r\n                    threshold = i\r\n                }\r\n            }\r\n            // console.log(threshold)\r\n            let objectRed = [];\r\n            let objectGreen = [];\r\n            let objectBlue = [];\r\n            \r\n            let bgRed = [];\r\n            let bgGreen = [];\r\n            let bgBlue = [];\r\n            \r\n            originPositionArr.forEach((i,index)=>{\r\n                if(i<threshold) {\r\n                    objectRed.push(0)\r\n                    objectGreen.push(0)\r\n                    objectBlue.push(0)\r\n\r\n                    bgRed.push(255)\r\n                    bgGreen.push(255)\r\n                    bgBlue.push(255)\r\n                }\r\n                else{\r\n                    objectRed.push(255)\r\n                    objectGreen.push(255)\r\n                    objectBlue.push(255)\r\n\r\n                    bgRed.push(0)\r\n                    bgGreen.push(0)\r\n                    bgBlue.push(0)\r\n                }\r\n            })\r\n\r\n            let temp = []\r\n            for (let i = 0; i < state.blue.length; i++) {\r\n                temp.push(objectRed[i])\r\n                temp.push(objectGreen[i])\r\n                temp.push(objectBlue[i])\r\n                temp.push(state.alpha[i])\r\n            }\r\n            // console.log(temp)\r\n\r\n            temp = new Uint8ClampedArray(temp)\r\n            objectRef.current.width = state.image.width || 400\r\n            objectRef.current.height = state.image.height || 400\r\n            let context = objectRef.current.getContext('2d')\r\n            let imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < state.blue.length; i++) {\r\n                temp.push(bgRed[i])\r\n                temp.push(bgGreen[i])\r\n                temp.push(bgBlue[i])\r\n                temp.push(state.alpha[i])\r\n            }\r\n\r\n            temp = new Uint8ClampedArray(temp)\r\n            backgroundRef.current.width = state.image.width || 400\r\n            backgroundRef.current.height = state.image.height || 400\r\n            context = backgroundRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n        }\r\n\r\n\r\n    }, [state.imageData])\r\n    return (\r\n        <div>\r\n            {state.imageData.length !== 0 ?\r\n                <div style={{ 'display': 'flex', 'justifyContent': 'space-around' }}>\r\n                    <div style={{ 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'justifyContent': 'space-around' }}>\r\n                        <H6>灰度直方图双峰混合高斯下背景|前景</H6>\r\n                        <canvas ref={backgroundRef} />\r\n                    </div>\r\n                    <div style={{ 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'justifyContent': 'space-around' }}>\r\n                        <H6>灰度直方图双峰混合高斯下前景|背景</H6>\r\n                        <canvas ref={objectRef} />\r\n                    </div>\r\n                </div>\r\n                :\r\n                <></>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport Alert from '@material-ui/core/Alert';\r\nimport AlertTitle from '@material-ui/core/AlertTitle';\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // 更新 state 使下一次渲染能够显示降级后的 UI\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // 你同样可以将错误日志上报给服务器\r\n        //   logErrorToMyService(error, errorInfo);\r\n        console.log(error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (<>\r\n                <Alert severity=\"error\">\r\n                    <AlertTitle>内存炸了</AlertTitle>\r\n                    （内存调度过来可能仍然能继续运行）如果下面处理结果没有显示<strong>尝试刷新页面!</strong>并再次上传|<strong>或者上传小一点的图片吧！</strong>\r\n                </Alert>\r\n                {this.props.children}\r\n            </>);\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundary","import './App.css';\r\nimport { GlobalStateProvider } from \"./globalState\";\r\nimport { Divider } from \"@material-ui/core/\";\r\nimport Uploader from './Uploader'\r\nimport Channels from './Canvases/Channels';\r\nimport Gradient from './Canvases/Gradient';\r\nimport RobortGradient from './Canvases/RobortGradient';\r\nimport Fourier from './Canvases/Fourier';\r\nimport HistSegment from './Canvases/HistSegment';\r\nimport ErrorBoundary from './ErrorBoundary';\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalStateProvider>\r\n      <ErrorBoundary>\r\n        <Uploader />\r\n        <Divider />\r\n        <Channels />\r\n        <Divider />\r\n        <Gradient />\r\n        <Divider />\r\n        <RobortGradient />\r\n        <Divider />\r\n        {/* <Fourier /> */}\r\n        <HistSegment/>\r\n      </ErrorBoundary>\r\n    </GlobalStateProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}