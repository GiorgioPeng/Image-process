{"version":3,"sources":["globalState.js","Uploader/index.js","Canvases/Channels.js","Canvases/Gradient.js","Canvases/RobortGradient.js","ErrorBoundary.js","App.js","reportWebVitals.js","index.js"],"names":["GloalStateContext","createContext","initState","imageSrc","image","imageData","red","green","blue","alpha","GlobalStateProvider","children","useState","state","setState","Provider","value","key","console","log","lastState","useGlobalState","useContext","Input","styled","display","H1","theme","typography","h1","backgroundColor","palette","background","paper","padding","spacing","UploadButtons","updateState","imgRef","React","canvasRef","style","htmlFor","accept","id","type","onChange","event","URL","createObjectURL","currentTarget","files","Button","variant","component","src","ref","onLoad","current","width","height","content","getContext","clearRect","drawImage","data","getImageData","i","length","push","Channels","redRef","greenRef","blueRef","temp","Uint8ClampedArray","context","ImageData","putImageData","Gradient","redGradientRef","greenGradientRef","blueGradientRef","gradientRef","slice","j","temp1","maxGradiant","Math","max","minGradiant","min","map","temp2","temp3","RobortGradient","ErrorBoundary","props","hasError","error","errorInfo","this","Alert","severity","AlertTitle","App","Divider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64826a08.chunk.js","sourcesContent":["import React, { useState, createContext, useContext, } from 'react';\r\n\r\nconst GloalStateContext = createContext(null)\r\n\r\nconst initState = {\r\n    imageSrc:'',\r\n    image:'',\r\n    imageData:'',\r\n    red:'',\r\n    green:'',\r\n    blue:'',\r\n    alpha:'',\r\n\r\n};\r\nexport function GlobalStateProvider({ children }) {\r\n    const [state, setState] = useState(initState);\r\n\r\n    const updateState = (key, value) => {\r\n        console.log(key, value)\r\n        setState((lastState) => {\r\n            return {\r\n                ...lastState,\r\n                [key]: value\r\n            }\r\n        })\r\n    }\r\n    const resetState = () => {\r\n        setState(initState)\r\n    }\r\n    return (\r\n        <GloalStateContext.Provider value={[state, updateState, resetState]}>\r\n            {children}\r\n        </GloalStateContext.Provider>\r\n    )\r\n}\r\nexport function useGlobalState() {\r\n    return useContext(GloalStateContext)\r\n}","import * as React from 'react';\r\nimport { styled } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useGlobalState } from '../globalState';\r\n\r\nconst Input = styled('input')({\r\n    display: 'none',\r\n});\r\nconst H1 = styled('H1')(({ theme }) => ({\r\n    ...theme.typography.h1,\r\n    backgroundColor: theme.palette.background.paper,\r\n    padding: theme.spacing(1),\r\n  }));\r\n  \r\n\r\nexport default function UploadButtons() {\r\n    const [state, updateState,] = useGlobalState();\r\n    const imgRef = React.useRef(null)\r\n    const canvasRef = React.useRef(null)\r\n    const upload = (event) => {\r\n        updateState('imageSrc', URL.createObjectURL(event.currentTarget.files[0]))\r\n    }\r\n    const draw = ()=>{\r\n        canvasRef.current.width = imgRef.current.width || 400\r\n        canvasRef.current.height = imgRef.current.height || 400\r\n        const content = canvasRef.current.getContext('2d')\r\n        content.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n        content.drawImage(imgRef.current, 0, 0, canvasRef.current.width, canvasRef.current.height)\r\n        imgRef.current.style.display = 'none'\r\n        const data = content.getImageData(0, 0, canvasRef.current.width, canvasRef.current.height)\r\n        updateState('image',data)\r\n        updateState('imageData',data.data)\r\n        const red = []\r\n        const green = []\r\n        const blue = []\r\n        const alpha = []\r\n        for(let i = 0;i<data.data.length;i+=4){\r\n            red.push(data.data[i])\r\n            green.push(data.data[i+1])\r\n            blue.push(data.data[i+2])\r\n            alpha.push(data.data[i+3])\r\n        }\r\n        updateState('red',red)\r\n        updateState('green',green)\r\n        updateState('blue',blue)\r\n        updateState('alpha',alpha)\r\n    }\r\n    return (\r\n        <div style={{'margin':'20vh auto', 'display': 'flex','alignItems':'center','flexDirection':'column'}}>\r\n            <H1>Upload is all you need.</H1>\r\n            <label htmlFor=\"contained-button-file\">\r\n                <Input accept=\"image/*\" id=\"contained-button-file\" type=\"file\" onChange={upload} />\r\n                <Button variant=\"contained\" component=\"span\">\r\n                    Upload\r\n                </Button>\r\n            </label>\r\n            <img src={state.imageSrc} ref={imgRef} style={{ 'maxWidth': '400px' }} onLoad={draw}/>\r\n            <canvas ref={canvasRef} />\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { useGlobalState } from '../globalState';\r\n\r\n\r\nexport default function Channels() {\r\n    const redRef = React.useRef(null)\r\n    const greenRef = React.useRef(null)\r\n    const blueRef = React.useRef(null)\r\n    const [state,] = useGlobalState();\r\n    React.useEffect(() => {\r\n        if (state.imageData.length !== 0) {\r\n            let temp = []\r\n            for (let i = 0; i < state.red.length; i++) {\r\n                temp.push(state.red[i])\r\n                temp.push(0)\r\n                temp.push(0)\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            redRef.current.width = state.image.width || 400\r\n            redRef.current.height = state.image.height || 400\r\n            let context = redRef.current.getContext('2d')\r\n            let imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < state.green.length; i++) {\r\n                temp.push(0)\r\n                temp.push(state.green[i])\r\n                temp.push(0)\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            greenRef.current.width = state.image.width || 400\r\n            greenRef.current.height = state.image.height || 400\r\n            context = greenRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < state.blue.length; i++) {\r\n                temp.push(0)\r\n                temp.push(0)\r\n                temp.push(state.blue[i])\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            blueRef.current.width = state.image.width || 400\r\n            blueRef.current.height = state.image.height || 400\r\n            context = blueRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n        }\r\n\r\n\r\n    }, [state.imageData])\r\n    return (\r\n        <div>\r\n            {state.imageData.length !== 0 ?\r\n                <div style={{'display': 'flex','justifyContent':'space-around'}}>\r\n                    <div>\r\n                        <p>红色通道</p>\r\n                        <canvas ref={redRef} />\r\n                    </div>\r\n                    <div>\r\n                        <p>绿色通道</p>\r\n                        <canvas ref={greenRef} />\r\n                    </div>\r\n                    <div>\r\n                        <p>蓝色通道</p>\r\n                        <canvas ref={blueRef}></canvas>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <></>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { useGlobalState } from '../globalState';\r\n\r\n\r\nexport default function Gradient() {\r\n    const redGradientRef = React.useRef(null)\r\n    const greenGradientRef = React.useRef(null)\r\n    const blueGradientRef = React.useRef(null)\r\n    const gradientRef = React.useRef(null)\r\n    const [state,] = useGlobalState();\r\n    React.useEffect(() => {\r\n        if (state.imageData.length !== 0) {\r\n            let temp = []\r\n            for (let i = 0; i < state.red.length; i += state.image.width) {\r\n                temp.push(state.red.slice(i, i + state.image.width))\r\n            }\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    temp[i][j] = (temp[i][j] - temp[i + 1][j]) + (temp[i][j] - temp[i][j + 1])\r\n                }\r\n            }\r\n            let temp1 = []\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    temp1.push(temp[i][j])\r\n                }\r\n            }\r\n            let maxGradiant = Math.max(...temp1)\r\n            let minGradiant = Math.min(...temp1)\r\n            temp1 = temp1.map(i => (i - minGradiant) / (maxGradiant - minGradiant) * 255)\r\n            temp = []\r\n            for (let i = 0; i < temp1.length; i++) {\r\n                temp.push(temp1[i])\r\n                temp.push(0)\r\n                temp.push(0)\r\n                temp.push(state.alpha[i])\r\n            }\r\n\r\n\r\n            temp = new Uint8ClampedArray(temp)\r\n            redGradientRef.current.width = state.image.width || 400\r\n            redGradientRef.current.height = state.image.height || 400\r\n            let context = redGradientRef.current.getContext('2d')\r\n            let imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < state.green.length; i += state.image.width) {\r\n                temp.push(state.green.slice(i, i + state.image.width))\r\n            }\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    temp[i][j] = (temp[i][j] - temp[i + 1][j]) + (temp[i][j] - temp[i][j + 1])\r\n                }\r\n            }\r\n            let temp2 = []\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    temp2.push(temp[i][j])\r\n                }\r\n            }\r\n            maxGradiant = Math.max(...temp2)\r\n            minGradiant = Math.min(...temp2)\r\n            temp2 = temp2.map(i => (i - minGradiant) / (maxGradiant - minGradiant) * 255)\r\n            temp = []\r\n            for (let i = 0; i < temp2.length; i++) {\r\n                temp.push(0)\r\n                temp.push(temp2[i])\r\n                temp.push(0)\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            greenGradientRef.current.width = state.image.width || 400\r\n            greenGradientRef.current.height = state.image.height || 400\r\n            context = greenGradientRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < state.blue.length; i += state.image.width) {\r\n                temp.push(state.blue.slice(i, i + state.image.width))\r\n            }\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    temp[i][j] = (temp[i][j] - temp[i + 1][j]) + (temp[i][j] - temp[i][j + 1])\r\n                }\r\n            }\r\n            let temp3 = []\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    temp3.push(temp[i][j])\r\n                }\r\n            }\r\n            maxGradiant = Math.max(...temp3)\r\n            minGradiant = Math.min(...temp3)\r\n            temp3 = temp3.map(i => (i - minGradiant) / (maxGradiant - minGradiant) * 255)\r\n            temp = []\r\n            for (let i = 0; i < temp3.length; i++) {\r\n                temp.push(0)\r\n                temp.push(0)\r\n                temp.push(temp3[i])\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            blueGradientRef.current.width = state.image.width || 400\r\n            blueGradientRef.current.height = state.image.height || 400\r\n            context = blueGradientRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < temp3.length; i++) {\r\n                temp.push(temp1[i])\r\n                temp.push(temp2[i])\r\n                temp.push(temp3[i])\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            gradientRef.current.width = state.image.width || 400\r\n            gradientRef.current.height = state.image.height || 400\r\n            context = gradientRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n        }\r\n\r\n\r\n    }, [state.imageData])\r\n    return (\r\n        <div>\r\n            {state.imageData.length !== 0 ?\r\n                <div style={{ 'display': 'flex', 'justifyContent': 'space-around' }}>\r\n                    <div>\r\n                        <p>红色通道差分梯度</p>\r\n                        <canvas ref={redGradientRef} />\r\n                    </div>\r\n                    <div>\r\n                        <p>绿色通道差分梯度</p>\r\n                        <canvas ref={greenGradientRef} />\r\n                    </div>\r\n                    <div>\r\n                        <p>蓝色通道差分梯度</p>\r\n                        <canvas ref={blueGradientRef}></canvas>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <p>差分梯度图</p>\r\n                        <canvas ref={gradientRef}></canvas>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <></>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { useGlobalState } from '../globalState';\r\n\r\n\r\nexport default function RobortGradient() {\r\n    const redGradientRef = React.useRef(null)\r\n    const greenGradientRef = React.useRef(null)\r\n    const blueGradientRef = React.useRef(null)\r\n    const gradientRef = React.useRef(null)\r\n    const [state,] = useGlobalState();\r\n    React.useEffect(() => {\r\n        if (state.imageData.length !== 0) {\r\n            let temp = []\r\n            for (let i = 0; i < state.red.length; i += state.image.width) {\r\n                temp.push(state.red.slice(i, i + state.image.width))\r\n            }\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    temp[i][j] = (temp[i][j] - temp[i + 1][j + 1]) + (temp[i][j + 1] - temp[i + 1][j])\r\n                }\r\n            }\r\n            let temp1 = []\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    temp1.push(temp[i][j])\r\n                }\r\n            }\r\n            let maxGradiant = Math.max(...temp1)\r\n            let minGradiant = Math.min(...temp1)\r\n            temp1 = temp1.map(i => (i - minGradiant) / (maxGradiant - minGradiant) * 255)\r\n            temp = []\r\n            for (let i = 0; i < temp1.length; i++) {\r\n                temp.push(temp1[i])\r\n                temp.push(0)\r\n                temp.push(0)\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            redGradientRef.current.width = state.image.width || 400\r\n            redGradientRef.current.height = state.image.height || 400\r\n            let context = redGradientRef.current.getContext('2d')\r\n            let imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < state.green.length; i += state.image.width) {\r\n                temp.push(state.green.slice(i, i + state.image.width))\r\n            }\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    temp[i][j] = (temp[i][j] - temp[i + 1][j + 1]) + (temp[i][j + 1] - temp[i + 1][j])\r\n                }\r\n            }\r\n            let temp2 = []\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    temp2.push(temp[i][j])\r\n                }\r\n            }\r\n            maxGradiant = Math.max(...temp2)\r\n            minGradiant = Math.min(...temp2)\r\n            temp2 = temp2.map(i => (i - minGradiant) / (maxGradiant - minGradiant) * 255)\r\n            temp = []\r\n            for (let i = 0; i < temp2.length; i++) {\r\n                temp.push(0)\r\n                temp.push(temp2[i])\r\n                temp.push(0)\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            greenGradientRef.current.width = state.image.width || 400\r\n            greenGradientRef.current.height = state.image.height || 400\r\n            context = greenGradientRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < state.blue.length; i += state.image.width) {\r\n                temp.push(state.blue.slice(i, i + state.image.width))\r\n            }\r\n            for (let i = 0; i < state.image.height - 1; i++) {\r\n                for (let j = 0; j < state.image.width - 1; j++) {\r\n                    temp[i][j] = (temp[i][j] - temp[i + 1][j + 1]) + (temp[i][j + 1] - temp[i + 1][j])\r\n                }\r\n            }\r\n            let temp3 = []\r\n            for (let i = 0; i < state.image.height; i++) {\r\n                for (let j = 0; j < state.image.width; j++) {\r\n                    temp3.push(temp[i][j])\r\n                }\r\n            }\r\n            maxGradiant = Math.max(...temp3)\r\n            minGradiant = Math.min(...temp3)\r\n            temp3 = temp3.map(i => (i - minGradiant) / (maxGradiant - minGradiant) * 255)\r\n            temp = []\r\n            for (let i = 0; i < temp3.length; i++) {\r\n                temp.push(0)\r\n                temp.push(0)\r\n                temp.push(temp3[i])\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            blueGradientRef.current.width = state.image.width || 400\r\n            blueGradientRef.current.height = state.image.height || 400\r\n            context = blueGradientRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n\r\n\r\n            temp = []\r\n            for (let i = 0; i < temp3.length; i++) {\r\n                temp.push(temp1[i])\r\n                temp.push(temp2[i])\r\n                temp.push(temp3[i])\r\n                temp.push(state.alpha[i])\r\n            }\r\n            temp = new Uint8ClampedArray(temp)\r\n            gradientRef.current.width = state.image.width || 400\r\n            gradientRef.current.height = state.image.height || 400\r\n            context = gradientRef.current.getContext('2d')\r\n            imageData = new ImageData(temp, state.image.width, state.image.height)\r\n            context.putImageData(imageData, 0, 0)\r\n        }\r\n\r\n\r\n    }, [state.imageData])\r\n    return (\r\n        <div>\r\n            {state.imageData.length !== 0 ?\r\n                <div style={{ 'display': 'flex', 'justifyContent': 'space-around' }}>\r\n                    <div>\r\n                        <p>红色通道差分罗伯特梯度</p>\r\n                        <canvas ref={redGradientRef} />\r\n                    </div>\r\n                    <div>\r\n                        <p>绿色通道差分罗伯特梯度</p>\r\n                        <canvas ref={greenGradientRef} />\r\n                    </div>\r\n                    <div>\r\n                        <p>蓝色通道差分罗伯特梯度</p>\r\n                        <canvas ref={blueGradientRef}></canvas>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <p>差分罗伯特梯度图</p>\r\n                        <canvas ref={gradientRef}></canvas>\r\n                    </div>\r\n                </div>\r\n                :\r\n                <></>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport Alert from '@material-ui/core/Alert';\r\nimport AlertTitle from '@material-ui/core/AlertTitle';\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // 更新 state 使下一次渲染能够显示降级后的 UI\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        // 你同样可以将错误日志上报给服务器\r\n        //   logErrorToMyService(error, errorInfo);\r\n        console.log(error, errorInfo);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return (<>\r\n                <Alert severity=\"error\">\r\n                    <AlertTitle>内存炸了</AlertTitle>\r\n                    <strong>尝试刷新页面!</strong>如果再次上传不行，就上传小一点的图片吧！\r\n                </Alert>\r\n                {this.props.children}\r\n            </>);\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundary","import './App.css';\r\nimport { GlobalStateProvider } from \"./globalState\";\r\nimport { Divider } from \"@material-ui/core/\";\r\nimport Uploader from './Uploader'\r\nimport Channels from './Canvases/Channels';\r\nimport Gradient from './Canvases/Gradient';\r\nimport RobortGradient from './Canvases/RobortGradient';\r\nimport Fourier from './Canvases/Fourier';\r\nimport ErrorBoundary from './ErrorBoundary';\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalStateProvider>\r\n      <ErrorBoundary>\r\n        <Uploader />\r\n        <Divider />\r\n        <Channels />\r\n        <Divider />\r\n        <Gradient />\r\n        <Divider />\r\n        <RobortGradient />\r\n        <Divider />\r\n        {/* <Fourier /> */}\r\n      </ErrorBoundary>\r\n    </GlobalStateProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}